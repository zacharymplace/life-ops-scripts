name: Deploy

on:
  push:
    branches: [main]
    tags: ['v*']         # e.g. v0.1.6
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml

      - name: Install deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      # Your existing packager
      - name: Build artifacts (deploy.sh)
        shell: bash
        run: |
          chmod +x ./deploy.sh
          ./deploy.sh

      # Only build a wheel/sdist if the repo actually has a pyproject
      - name: Build wheel/sdist (if packaging present)
        if: ${{ hashFiles('pyproject.toml') != '' }}
        shell: bash
        run: |
          python -m pip install --upgrade build
          python -m build

      # Always upload out/* so you can inspect from the run
      - name: Upload build artifacts (out/)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-out
          path: |
            out/*.zip
            out/*.sha256
          if-no-files-found: ignore

      # Upload dist/* only if a package was built
      - name: Upload dist/* (if built)
        if: ${{ hashFiles('pyproject.toml') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
          if-no-files-found: ignore

      # Create/Update Release only on tags; include whichever artifacts exist
      - name: Create/Update GitHub Release (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          allowUpdates: true
          artifacts: |
            out/*.zip
            out/*.sha256
            dist/*
          artifactErrorsFailBuild: false
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
